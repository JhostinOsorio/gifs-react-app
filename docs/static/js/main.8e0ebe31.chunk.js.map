{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","alert","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","then","GifGridItem","className","src","alt","GifGrid","img","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAkCeA,EA/BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAgBzC,OACE,sBAAMC,SAba,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC7BR,GAAc,SAAAS,GAAC,OAAKP,GAAL,mBAAoBO,OACnCN,EAAc,KAEdO,MAAM,gDAMR,SACE,uBACEC,KAAK,OACLC,MAAOV,EACPW,SAAU,SAACR,GAAD,OAAOF,EAAcE,EAAES,OAAOF,a,+BCxBnCG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACT,mCACNC,EAFe,iDAEiCC,UAAUH,GAF3C,UAE8D,GAF9D,oBACT,oCADS,SAGFI,MAAMF,GAHJ,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KACFC,EAAOD,EAAKE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,OAAd,MACpB,CACEF,KACAC,QACAT,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBX,QATb,kBAYdM,GAZc,4CAAH,sDCsBLM,EAnBM,SAACd,GAAc,IAAD,EACPf,mBAAS,CACjCsB,KAAM,GACNQ,SAAS,IAHsB,mBAC1BC,EAD0B,KACnBC,EADmB,KAgBjC,OAVAC,qBAAU,WACRnB,EAAQC,GACLmB,MAAK,SAAAP,GACJK,EAAS,CACPV,KAAMK,EACNG,SAAS,SAGd,CAACf,IAEGgB,GCPMI,EAVK,SAAC,GAAoB,IAAlBT,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAE5B,OACE,sBAAKmB,UAAU,yCAAf,UACE,qBAAKC,IAAKpB,EAAKqB,IAAKZ,IACpB,4BAAIA,QCiBKa,EApBC,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAAe,EAECc,EAAad,GAAjCY,EAFmB,EAExBL,KAAaQ,EAFW,EAEXA,QAErB,OACE,qCACE,oBAAIM,UAAU,oCAAd,SAAmDrB,IAClDe,GAAW,mBAAGM,UAAU,mCAAb,0BACZ,qBAAKA,UAAU,YAAf,SACGT,EAAOH,KAAK,SAAAgB,GAAG,OACd,cAAC,EAAD,eAEMA,GADCA,EAAIf,aCONgB,EAlBM,SAAAC,GAAU,IAAD,EAEQ1C,mBAAS,CAAC,WAFlB,mBAErB2C,EAFqB,KAET5C,EAFS,KAI5B,OACE,qCACE,8CACA,cAAC,EAAD,CACEA,cAAeA,IAEjB,uBAEE4C,EAAWnB,KAAI,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,U,YCVjD6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8e0ebe31.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\n  const [inputValue, setInputValue] = useState('')\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories(c => [inputValue, ...c])\n      setInputValue('')\n    } else {\n      alert('Ingresar mas de dos letras por categor√≠a')\n    }\n\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input \n        type=\"text\"\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","export const getGifs = async (category) => {\n  const key = 'zIyaGlitChDtWrBX7fWpDCacZ9tLpdsP';\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${10}&api_key=${key}`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map(({ id, title, images }) => (\n    {\n      id,\n      title,\n      url: images?.downsized_medium.url,\n    }\n  ));\n  return gifs;\n}","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nconst useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  })\n\n  useEffect(() => {\n    getGifs(category)\n      .then(images => {\n        setstate({\n          data: images,\n          loading: false,\n        })\n      })\n  }, [category])\n\n  return state\n}\n\nexport default useFetchGifs\n","import React from 'react'\n\nconst GifGridItem = ({ title, url }) => {\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title}/>\n      <p>{title}</p>\n    </div>\n  )\n}\n\nexport default GifGridItem","import React from 'react'\nimport useFetchGifs from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n  const { data:images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n      {loading && <p className=\"animate__animated animate__flash\">Cargando ...</p>}\n      <div className=\"card-grid\">\n        {images.map( img => (\n          <GifGridItem \n            key={img.id}\n            {...img}\n          />\n        ))}\n      </div>\n    </>\n  )\n}\n\nexport default GifGrid","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = props => {\n  \n  const [categories, setCategories] = useState(['Futbol'])\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory \n        setCategories={setCategories}\n      />\n      <hr />\n      {\n        categories.map(category => <GifGrid key={category} category={category}/>)\n      }\n    </>\n  )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport 'animate.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}